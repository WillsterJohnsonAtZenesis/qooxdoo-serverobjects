/**
 * Class generated by Qoxodoo Server Objects com.zenesis.qx.remote.ClassWriter
 * 
 * @use(com.zenesis.qx.remote.test.properties.ITestValue)
 */

qx.Class.define("com.zenesis.qx.remote.test.properties.TestArrays", {
  "extend" : qx.core.Object,
  "implement" : [ com.zenesis.qx.remote.test.properties.ITestArrays ],
  "construct" : function() {
    var args = qx.lang.Array.fromArguments(arguments);
    args.unshift(arguments);
    this.base.apply(this, args);
    this.initialiseProxy();
 },
  "properties" : {
    "objectArrayList" : {
      "@" : [ new com.zenesis.qx.remote.annotations.Property().set({
  "componentTypeName":"com.zenesis.qx.remote.test.properties.ITestValue"
}) ],
      "transform":"__transformObjectArrayList",
      "nullable" : true,
      "apply":"_applyObjectArrayList",
      "check":"qx.data.Array",
      "event":"changeObjectArrayList"
    },
    "objectArray" : {
      "@" : [ new com.zenesis.qx.remote.annotations.Property().set({
  "componentTypeName":"com.zenesis.qx.remote.test.properties.ITestValue"
}) ],
      "transform":"__transformObjectArray",
      "nullable" : true,
      "apply":"_applyObjectArray",
      "check":"qx.data.Array",
      "event":"changeObjectArray"
    },
    "scalarArray" : {
      "@" : [ new com.zenesis.qx.remote.annotations.Property().set({
  "componentTypeName":"String"
}) ],
      "transform":"__transformScalarArray",
      "nullable" : true,
      "apply":"_applyScalarArray",
      "check":"qx.data.Array",
      "event":"changeScalarArray"
    },
    "scalarArrayList" : {
      "@" : [ new com.zenesis.qx.remote.annotations.Property().set({
  "componentTypeName":"String"
}) ],
      "transform":"__transformScalarArrayList",
      "nullable" : true,
      "apply":"_applyScalarArrayList",
      "check":"qx.data.Array",
      "event":"changeScalarArrayList"
    },
    "readOnlyArray" : {
      "@" : [ new com.zenesis.qx.remote.annotations.Property().set({
  "readOnly" : true,
  "componentTypeName":"String"
}) ],
      "transform":"__transformReadOnlyArray",
      "nullable" : true,
      "apply":"_applyReadOnlyArray",
      "check":"qx.data.Array",
      "event":"changeReadOnlyArray"
    }
  },
  "members" : {
    "testObjectArray" : function() {
    return this._callServer("testObjectArray", qx.lang.Array.fromArguments(arguments));
 },
    "checkReadOnlyArrayAsync" : function() {
    var args = qx.lang.Array.fromArguments(arguments);
    return new qx.Promise(function(resolve, reject) {
      args.push(function() {
        resolve.apply(this, qx.lang.Array.fromArguments(arguments));
      });
      this._callServer("checkReadOnlyArray", args);
    }, this);
 },
    "testScalarArrayListAsync" : function() {
    var args = qx.lang.Array.fromArguments(arguments);
    return new qx.Promise(function(resolve, reject) {
      args.push(function() {
        resolve.apply(this, qx.lang.Array.fromArguments(arguments));
      });
      this._callServer("testScalarArrayList", args);
    }, this);
 },
    "_applyScalarArray" : function(value, oldValue, name) {
    this._applyProperty("scalarArray", value, oldValue, name);
 },
    "getObjectArrayListAsync" : function() {
    return qx.Promise.resolve(this.getObjectArrayList()).bind(this);
 },
    "_applyObjectArrayList" : function(value, oldValue, name) {
    this._applyProperty("objectArrayList", value, oldValue, name);
 },
    "testScalarArray" : function() {
    return this._callServer("testScalarArray", qx.lang.Array.fromArguments(arguments));
 },
    "__transformReadOnlyArray" : function(value) {
    return com.zenesis.qx.remote.MProxy.transformToDataArray(value, qx.data.Array);
 },
    "_applyReadOnlyArray" : function(value, oldValue, name) {
    this._applyProperty("readOnlyArray", value, oldValue, name);
 },
    "getReadOnlyArrayAsync" : function() {
    return qx.Promise.resolve(this.getReadOnlyArray()).bind(this);
 },
    "testScalarArrayList" : function() {
    return this._callServer("testScalarArrayList", qx.lang.Array.fromArguments(arguments));
 },
    "__transformScalarArray" : function(value) {
    return com.zenesis.qx.remote.MProxy.transformToDataArray(value, qx.data.Array);
 },
    "checkReadOnlyArray" : function() {
    return this._callServer("checkReadOnlyArray", qx.lang.Array.fromArguments(arguments));
 },
    "_applyObjectArray" : function(value, oldValue, name) {
    this._applyProperty("objectArray", value, oldValue, name);
 },
    "getScalarArrayListAsync" : function() {
    return qx.Promise.resolve(this.getScalarArrayList()).bind(this);
 },
    "testObjectArrayAsync" : function() {
    var args = qx.lang.Array.fromArguments(arguments);
    return new qx.Promise(function(resolve, reject) {
      args.push(function() {
        resolve.apply(this, qx.lang.Array.fromArguments(arguments));
      });
      this._callServer("testObjectArray", args);
    }, this);
 },
    "__transformObjectArrayList" : function(value) {
    return com.zenesis.qx.remote.MProxy.transformToDataArray(value, qx.data.Array);
 },
    "__transformScalarArrayList" : function(value) {
    return com.zenesis.qx.remote.MProxy.transformToDataArray(value, qx.data.Array);
 },
    "getObjectArrayAsync" : function() {
    return qx.Promise.resolve(this.getObjectArray()).bind(this);
 },
    "testScalarArrayAsync" : function() {
    var args = qx.lang.Array.fromArguments(arguments);
    return new qx.Promise(function(resolve, reject) {
      args.push(function() {
        resolve.apply(this, qx.lang.Array.fromArguments(arguments));
      });
      this._callServer("testScalarArray", args);
    }, this);
 },
    "testObjectArrayList" : function() {
    return this._callServer("testObjectArrayList", qx.lang.Array.fromArguments(arguments));
 },
    "getScalarArrayAsync" : function() {
    return qx.Promise.resolve(this.getScalarArray()).bind(this);
 },
    "_applyScalarArrayList" : function(value, oldValue, name) {
    this._applyProperty("scalarArrayList", value, oldValue, name);
 },
    "__transformObjectArray" : function(value) {
    return com.zenesis.qx.remote.MProxy.transformToDataArray(value, qx.data.Array);
 },
    "testObjectArrayListAsync" : function() {
    var args = qx.lang.Array.fromArguments(arguments);
    return new qx.Promise(function(resolve, reject) {
      args.push(function() {
        resolve.apply(this, qx.lang.Array.fromArguments(arguments));
      });
      this._callServer("testObjectArrayList", args);
    }, this);
 }
  },
  "defer" : function(clazz) {
    clazz.$$eventMeta = {};
    clazz.$$methodMeta = {};
    com.zenesis.qx.remote.MProxy.deferredClassInitialisation(clazz);
    clazz.$$methodMeta.checkReadOnlyArray = {
      "isServer" : true
    };
    clazz.$$methodMeta.testObjectArray = {
      "isServer" : true
    };
    clazz.$$methodMeta.testObjectArrayList = {
      "isServer" : true
    };
    clazz.$$methodMeta.testScalarArray = {
      "isServer" : true
    };
    clazz.$$methodMeta.testScalarArrayList = {
      "isServer" : true
    };
    qx.lang.Object.mergeWith(clazz.$$properties.objectArrayList, {
      "onDemand" : false,
      "isServer" : true,
      "array":"wrap",
      "readOnly" : false,
      "sync":"queue",
      "nativeKeyType" : true
    });
    qx.lang.Object.mergeWith(clazz.$$properties.objectArray, {
      "onDemand" : false,
      "isServer" : true,
      "array":"wrap",
      "readOnly" : false,
      "sync":"queue",
      "nativeKeyType" : true
    });
    qx.lang.Object.mergeWith(clazz.$$properties.scalarArray, {
      "onDemand" : false,
      "isServer" : true,
      "array":"wrap",
      "readOnly" : false,
      "sync":"queue",
      "nativeKeyType" : true
    });
    qx.lang.Object.mergeWith(clazz.$$properties.scalarArrayList, {
      "onDemand" : false,
      "isServer" : true,
      "array":"wrap",
      "readOnly" : false,
      "sync":"queue",
      "nativeKeyType" : true
    });
    qx.lang.Object.mergeWith(clazz.$$properties.readOnlyArray, {
      "onDemand" : false,
      "isServer" : true,
      "array":"wrap",
      "readOnly" : true,
      "sync":"queue",
      "nativeKeyType" : true
    });
    clazz.$$eventMeta.changeReadOnlyArray = {
      "isServer" : true,
      "isProperty" : true
    };
    clazz.$$eventMeta.changeScalarArray = {
      "isServer" : true,
      "isProperty" : true
    };
    clazz.$$eventMeta.changeObjectArray = {
      "isServer" : true,
      "isProperty" : true
    };
    clazz.$$eventMeta.changeObjectArrayList = {
      "isServer" : true,
      "isProperty" : true
    };
    clazz.$$eventMeta.changeScalarArrayList = {
      "isServer" : true,
      "isProperty" : true
    };
 }
});
