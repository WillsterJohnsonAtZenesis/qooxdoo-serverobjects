/**
 * Class generated by Qoxodoo Server Objects com.zenesis.qx.remote.ClassWriter
 * 
 * @use(com.zenesis.qx.remote.test.properties.TestProperties)
 */

qx.Class.define("com.zenesis.qx.remote.test.multiuser.TestThreading", {
  "extend" : qx.core.Object,
  "construct" : function() {
    var args = qx.lang.Array.fromArguments(arguments);
    args.unshift(arguments);
    this.base.apply(this, args);
    this.initialiseProxy();
 },
  "members" : {
    "tryThisAsync" : function() {
    var args = qx.lang.Array.fromArguments(arguments);
    return new qx.Promise(function(resolve, reject) {
      args.push(function() {
        resolve.apply(this, qx.lang.Array.fromArguments(arguments));
      });
      this._callServer("tryThis", args);
    }, this);
 },
    "tryThis" : function() {
    return this._callServer("tryThis", qx.lang.Array.fromArguments(arguments));
 },
    "resetSerialAsync" : function() {
    var args = qx.lang.Array.fromArguments(arguments);
    return new qx.Promise(function(resolve, reject) {
      args.push(function() {
        resolve.apply(this, qx.lang.Array.fromArguments(arguments));
      });
      this._callServer("resetSerial", args);
    }, this);
 },
    "resetSerial" : function() {
    return this._callServer("resetSerial", qx.lang.Array.fromArguments(arguments));
 },
    "waitFor" : function() {
    return this._callServer("waitFor", qx.lang.Array.fromArguments(arguments));
 },
    "waitForAsync" : function() {
    var args = qx.lang.Array.fromArguments(arguments);
    return new qx.Promise(function(resolve, reject) {
      args.push(function() {
        resolve.apply(this, qx.lang.Array.fromArguments(arguments));
      });
      this._callServer("waitFor", args);
    }, this);
 }
  },
  "defer" : function(clazz) {
    clazz.$$eventMeta = {};
    clazz.$$methodMeta = {};
    com.zenesis.qx.remote.MProxy.deferredClassInitialisation(clazz);
    clazz.$$methodMeta.resetSerial = {"isServer":true};
    clazz.$$methodMeta.tryThis = {"isServer":true,"returnArray":"native","returnType":"com.zenesis.qx.remote.test.properties.TestProperties"};
    clazz.$$methodMeta.waitFor = {"isServer":true};
 }
});
