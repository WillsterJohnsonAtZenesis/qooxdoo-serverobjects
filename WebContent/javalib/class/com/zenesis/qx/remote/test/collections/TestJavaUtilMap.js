/**
 * Class generated by Qoxodoo Server Objects com.zenesis.qx.remote.ClassWriter
 * 
 * @use(com.zenesis.qx.remote.test.collections.TestJavaUtilMap)
 */

qx.Class.define("com.zenesis.qx.remote.test.collections.TestJavaUtilMap", {
  "extend" : qx.core.Object,
  "construct" : function() {
    var args = qx.lang.Array.fromArguments(arguments);
    args.unshift(arguments);
    this.base.apply(this, args);
    this.initialiseProxy();
 },
  "properties" : {
    "enumMap" : {
      "nullable" : true,
      "apply":"_applyEnumMap",
      "check":"com.zenesis.qx.remote.Map",
      "event":"changeEnumMap"
    },
    "unwrappedStringMap" : {
      "@" : [ new com.zenesis.qx.remote.annotations.Property().set({
  "componentTypeName":"String"
}) ],
      "nullable" : true,
      "apply":"_applyUnwrappedStringMap",
      "event":"changeUnwrappedStringMap"
    },
    "wrappedStringMap" : {
      "@" : [ new com.zenesis.qx.remote.annotations.Property().set({
  "componentTypeName":"String"
}) ],
      "nullable" : true,
      "apply":"_applyWrappedStringMap",
      "check":"com.zenesis.qx.remote.Map",
      "event":"changeWrappedStringMap"
    },
    "objectMap" : {
      "@" : [ new com.zenesis.qx.remote.annotations.Property().set({
  "componentTypeName":"com.zenesis.qx.remote.test.collections.TestJavaUtilMap"
}) ],
      "nullable" : true,
      "apply":"_applyObjectMap",
      "check":"com.zenesis.qx.remote.Map",
      "event":"changeObjectMap"
    }
  },
  "members" : {
    "checkMapUpdatedAsync" : function() {
    var args = qx.lang.Array.fromArguments(arguments);
    return new qx.Promise(function(resolve, reject) {
      args.push(function() {
        resolve.apply(this, qx.lang.Array.fromArguments(arguments));
      });
      this._callServer("checkMapUpdated", args);
    }, this);
 },
    "checkEnumMap" : function() {
    return this._callServer("checkEnumMap", qx.lang.Array.fromArguments(arguments));
 },
    "_applyWrappedStringMap" : function(value, oldValue, name) {
    this._applyProperty("wrappedStringMap", value, oldValue, name);
 },
    "getWrappedStringMapMethod" : function() {
    return this._callServer("getWrappedStringMapMethod", qx.lang.Array.fromArguments(arguments));
 },
    "getObjectMapAsync" : function() {
    return qx.Promise.resolve(this.getObjectMap()).bind(this);
 },
    "getWrappedStringMapMethodAsync" : function() {
    var args = qx.lang.Array.fromArguments(arguments);
    return new qx.Promise(function(resolve, reject) {
      args.push(function() {
        resolve.apply(this, qx.lang.Array.fromArguments(arguments));
      });
      this._callServer("getWrappedStringMapMethod", args);
    }, this);
 },
    "getUnwrappedStringMapAsync" : function() {
    return qx.Promise.resolve(this.getUnwrappedStringMap()).bind(this);
 },
    "checkEnumMapAsync" : function() {
    var args = qx.lang.Array.fromArguments(arguments);
    return new qx.Promise(function(resolve, reject) {
      args.push(function() {
        resolve.apply(this, qx.lang.Array.fromArguments(arguments));
      });
      this._callServer("checkEnumMap", args);
    }, this);
 },
    "checkMapUpdated" : function() {
    return this._callServer("checkMapUpdated", qx.lang.Array.fromArguments(arguments));
 },
    "checkObjectMapAsync" : function() {
    var args = qx.lang.Array.fromArguments(arguments);
    return new qx.Promise(function(resolve, reject) {
      args.push(function() {
        resolve.apply(this, qx.lang.Array.fromArguments(arguments));
      });
      this._callServer("checkObjectMap", args);
    }, this);
 },
    "getWrappedStringMapAsync" : function() {
    return qx.Promise.resolve(this.getWrappedStringMap()).bind(this);
 },
    "checkObjectMap" : function() {
    return this._callServer("checkObjectMap", qx.lang.Array.fromArguments(arguments));
 },
    "_applyObjectMap" : function(value, oldValue, name) {
    this._applyProperty("objectMap", value, oldValue, name);
 },
    "getEnumMapAsync" : function() {
    return qx.Promise.resolve(this.getEnumMap()).bind(this);
 },
    "_applyUnwrappedStringMap" : function(value, oldValue, name) {
    this._applyProperty("unwrappedStringMap", value, oldValue, name);
 },
    "_applyEnumMap" : function(value, oldValue, name) {
    this._applyProperty("enumMap", value, oldValue, name);
 }
  },
  "defer" : function(clazz) {
    clazz.$$eventMeta = {};
    clazz.$$methodMeta = {};
    com.zenesis.qx.remote.MProxy.deferredClassInitialisation(clazz);
    clazz.$$methodMeta.checkEnumMap = {
      "isServer" : true
    };
    clazz.$$methodMeta.checkMapUpdated = {
      "isServer" : true
    };
    clazz.$$methodMeta.checkObjectMap = {
      "isServer" : true
    };
    clazz.$$methodMeta.getWrappedStringMapMethod = {
      "isServer" : true,
      "returnArray":"wrap",
      "map" : true
    };
    qx.lang.Object.mergeWith(clazz.$$properties.enumMap, {
      "onDemand" : false,
      "isServer" : true,
      "array":"wrap",
      "readOnly" : false,
      "sync":"queue",
      "map" : true,
      "nativeKeyType" : true
    });
    qx.lang.Object.mergeWith(clazz.$$properties.unwrappedStringMap, {
      "onDemand" : false,
      "isServer" : true,
      "array":"native",
      "readOnly" : false,
      "sync":"queue",
      "map" : true,
      "nativeKeyType" : true
    });
    qx.lang.Object.mergeWith(clazz.$$properties.wrappedStringMap, {
      "onDemand" : false,
      "isServer" : true,
      "array":"wrap",
      "readOnly" : false,
      "sync":"queue",
      "map" : true,
      "nativeKeyType" : true
    });
    qx.lang.Object.mergeWith(clazz.$$properties.objectMap, {
      "onDemand" : false,
      "isServer" : true,
      "array":"wrap",
      "readOnly" : false,
      "sync":"queue",
      "map" : true,
      "nativeKeyType" : true
    });
    clazz.$$eventMeta.changeObjectMap = {
      "isServer" : true,
      "isProperty" : true
    };
    clazz.$$eventMeta.changeEnumMap = {
      "isServer" : true,
      "isProperty" : true
    };
    clazz.$$eventMeta.changeUnwrappedStringMap = {
      "isServer" : true,
      "isProperty" : true
    };
    clazz.$$eventMeta.changeWrappedStringMap = {
      "isServer" : true,
      "isProperty" : true
    };
 }
});
