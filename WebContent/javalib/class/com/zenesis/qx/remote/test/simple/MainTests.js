/**
 * Class generated by Qoxodoo Server Objects com.zenesis.qx.remote.ClassWriter
 * 
 * @use(com.zenesis.qx.remote.test.simple.Pippo)
 * @use(com.zenesis.qx.remote.test.simple.TestAnnos)
 * @use(com.zenesis.qx.remote.test.properties.ITestArrays)
 * @use(com.zenesis.qx.remote.test.properties.ITestExceptions)
 * @use(com.zenesis.qx.remote.test.properties.ITestProperties)
 * @use(com.zenesis.qx.remote.test.properties.TestGroups)
 * @use(com.zenesis.qx.remote.test.collections.TestJavaUtilMap)
 * @use(com.zenesis.qx.remote.test.simple.TestScalars)
 * @use(com.zenesis.qx.remote.test.properties.TestProperties)
 * @use(com.zenesis.qx.remote.test.properties.TestExceptions)
 * @use(com.zenesis.qx.remote.test.properties.TestArrays)
 * @use(com.zenesis.qx.remote.test.simple.ITestScalars)
 */

qx.Class.define("com.zenesis.qx.remote.test.simple.MainTests", {
  "extend" : qx.core.Object,
  "implement" : [ com.zenesis.qx.remote.test.simple.IMainTests ],
  "construct" : function() {
    var args = qx.lang.Array.fromArguments(arguments);
    args.unshift(arguments);
    this.base.apply(this, args);
    this.initialiseProxy();
 },
  "properties" : {
    "clientTestProperties" : {
      "nullable" : true,
      "apply":"_applyClientTestProperties",
      "check":"com.zenesis.qx.remote.test.properties.TestProperties",
      "event":"changeClientTestProperties"
    },
    "testGroups" : {
      "@" : [ new com.zenesis.qx.remote.annotations.Property().set({
  "readOnly" : true
}) ],
      "nullable" : true,
      "apply":"_applyTestGroups",
      "check":"com.zenesis.qx.remote.test.properties.TestGroups",
      "event":"changeTestGroups"
    },
    "testProperties" : {
      "@" : [ new com.zenesis.qx.remote.annotations.Property().set({
  "readOnly" : true
}) ],
      "nullable" : true,
      "apply":"_applyTestProperties",
      "check":"com.zenesis.qx.remote.test.properties.ITestProperties",
      "event":"changeTestProperties"
    }
  },
  "members" : {
    "testPippoArray" : function() {
    return this._callServer("testPippoArray", qx.lang.Array.fromArguments(arguments));
 },
    "getTestPropertiesAsync" : function() {
    return qx.Promise.resolve(this.getTestProperties()).bind(this);
 },
    "checkNewTestPropertiesAsync" : function() {
    var args = qx.lang.Array.fromArguments(arguments);
    return new qx.Promise(function(resolve, reject) {
      args.push(function() {
        resolve.apply(this, qx.lang.Array.fromArguments(arguments));
      });
      this._callServer("checkNewTestProperties", args);
    }, this);
 },
    "getTestGroupsAsync" : function() {
    return qx.Promise.resolve(this.getTestGroups()).bind(this);
 },
    "getTestExceptionsAsync" : function() {
    var args = qx.lang.Array.fromArguments(arguments);
    return new qx.Promise(function(resolve, reject) {
      args.push(function() {
        resolve.apply(this, qx.lang.Array.fromArguments(arguments));
      });
      this._callServer("getTestExceptions", args);
    }, this);
 },
    "getTestScalarsAsync" : function() {
    var args = qx.lang.Array.fromArguments(arguments);
    return new qx.Promise(function(resolve, reject) {
      args.push(function() {
        resolve.apply(this, qx.lang.Array.fromArguments(arguments));
      });
      this._callServer("getTestScalars", args);
    }, this);
 },
    "getTodaysDate" : function() {
    return this._callServer("getTodaysDate", qx.lang.Array.fromArguments(arguments));
 },
    "checkClientTestProperties" : function() {
    return this._callServer("checkClientTestProperties", qx.lang.Array.fromArguments(arguments));
 },
    "getTodaysDateAsync" : function() {
    var args = qx.lang.Array.fromArguments(arguments);
    return new qx.Promise(function(resolve, reject) {
      args.push(function() {
        resolve.apply(this, qx.lang.Array.fromArguments(arguments));
      });
      this._callServer("getTodaysDate", args);
    }, this);
 },
    "verifyTestScalars" : function() {
    return this._callServer("verifyTestScalars", qx.lang.Array.fromArguments(arguments));
 },
    "getTestArrays" : function() {
    return this._callServer("getTestArrays", qx.lang.Array.fromArguments(arguments));
 },
    "getTestScalars" : function() {
    return this._callServer("getTestScalars", qx.lang.Array.fromArguments(arguments));
 },
    "_applyTestGroups" : function(value, oldValue, name) {
    this._applyProperty("testGroups", value, oldValue, name);
 },
    "waitForMillisAsync" : function() {
    var args = qx.lang.Array.fromArguments(arguments);
    return new qx.Promise(function(resolve, reject) {
      args.push(function() {
        resolve.apply(this, qx.lang.Array.fromArguments(arguments));
      });
      this._callServer("waitForMillis", args);
    }, this);
 },
    "getPippo" : function() {
    return this._callServer("getPippo", qx.lang.Array.fromArguments(arguments));
 },
    "getPippoAsync" : function() {
    var args = qx.lang.Array.fromArguments(arguments);
    return new qx.Promise(function(resolve, reject) {
      args.push(function() {
        resolve.apply(this, qx.lang.Array.fromArguments(arguments));
      });
      this._callServer("getPippo", args);
    }, this);
 },
    "checkNewTestProperties" : function() {
    return this._callServer("checkNewTestProperties", qx.lang.Array.fromArguments(arguments));
 },
    "checkClientTestPropertiesAsync" : function() {
    var args = qx.lang.Array.fromArguments(arguments);
    return new qx.Promise(function(resolve, reject) {
      args.push(function() {
        resolve.apply(this, qx.lang.Array.fromArguments(arguments));
      });
      this._callServer("checkClientTestProperties", args);
    }, this);
 },
    "getTestExceptions" : function() {
    return this._callServer("getTestExceptions", qx.lang.Array.fromArguments(arguments));
 },
    "wasLastPippoDisposedAsync" : function() {
    var args = qx.lang.Array.fromArguments(arguments);
    return new qx.Promise(function(resolve, reject) {
      args.push(function() {
        resolve.apply(this, qx.lang.Array.fromArguments(arguments));
      });
      this._callServer("wasLastPippoDisposed", args);
    }, this);
 },
    "_applyClientTestProperties" : function(value, oldValue, name) {
    this._applyProperty("clientTestProperties", value, oldValue, name);
 },
    "getTestMapAsync" : function() {
    var args = qx.lang.Array.fromArguments(arguments);
    return new qx.Promise(function(resolve, reject) {
      args.push(function() {
        resolve.apply(this, qx.lang.Array.fromArguments(arguments));
      });
      this._callServer("getTestMap", args);
    }, this);
 },
    "verifyTestScalarsAsync" : function() {
    var args = qx.lang.Array.fromArguments(arguments);
    return new qx.Promise(function(resolve, reject) {
      args.push(function() {
        resolve.apply(this, qx.lang.Array.fromArguments(arguments));
      });
      this._callServer("verifyTestScalars", args);
    }, this);
 },
    "wasLastPippoDisposed" : function() {
    return this._callServer("wasLastPippoDisposed", qx.lang.Array.fromArguments(arguments));
 },
    "getTestArraysAsync" : function() {
    var args = qx.lang.Array.fromArguments(arguments);
    return new qx.Promise(function(resolve, reject) {
      args.push(function() {
        resolve.apply(this, qx.lang.Array.fromArguments(arguments));
      });
      this._callServer("getTestArrays", args);
    }, this);
 },
    "testPippoArrayAsync" : function() {
    var args = qx.lang.Array.fromArguments(arguments);
    return new qx.Promise(function(resolve, reject) {
      args.push(function() {
        resolve.apply(this, qx.lang.Array.fromArguments(arguments));
      });
      this._callServer("testPippoArray", args);
    }, this);
 },
    "isYesterdayAsync" : function() {
    var args = qx.lang.Array.fromArguments(arguments);
    return new qx.Promise(function(resolve, reject) {
      args.push(function() {
        resolve.apply(this, qx.lang.Array.fromArguments(arguments));
      });
      this._callServer("isYesterday", args);
    }, this);
 },
    "getTestMap" : function() {
    return this._callServer("getTestMap", qx.lang.Array.fromArguments(arguments));
 },
    "testPippoArray2" : function() {
    return this._callServer("testPippoArray2", qx.lang.Array.fromArguments(arguments));
 },
    "waitForMillis" : function() {
    return this._callServer("waitForMillis", qx.lang.Array.fromArguments(arguments));
 },
    "getTestAnnos" : function() {
    return this._callServer("getTestAnnos", qx.lang.Array.fromArguments(arguments));
 },
    "_applyTestProperties" : function(value, oldValue, name) {
    this._applyProperty("testProperties", value, oldValue, name);
 },
    "isYesterday" : function() {
    return this._callServer("isYesterday", qx.lang.Array.fromArguments(arguments));
 },
    "testPippoArray2Async" : function() {
    var args = qx.lang.Array.fromArguments(arguments);
    return new qx.Promise(function(resolve, reject) {
      args.push(function() {
        resolve.apply(this, qx.lang.Array.fromArguments(arguments));
      });
      this._callServer("testPippoArray2", args);
    }, this);
 },
    "getClientTestPropertiesAsync" : function() {
    return qx.Promise.resolve(this.getClientTestProperties()).bind(this);
 },
    "getTestAnnosAsync" : function() {
    var args = qx.lang.Array.fromArguments(arguments);
    return new qx.Promise(function(resolve, reject) {
      args.push(function() {
        resolve.apply(this, qx.lang.Array.fromArguments(arguments));
      });
      this._callServer("getTestAnnos", args);
    }, this);
 }
  },
  "statics" : {
    "myStaticMethod" : function() {
    return com.zenesis.qx.remote.ProxyManager._callServer(com.zenesis.qx.remote.test.simple.MainTests, "myStaticMethod", qx.lang.Array.fromArguments(arguments));
 }
  },
  "defer" : function(clazz) {
    clazz.$$eventMeta = {};
    clazz.$$methodMeta = {};
    com.zenesis.qx.remote.MProxy.deferredClassInitialisation(clazz);
    clazz.$$methodMeta.checkClientTestProperties = {
      "isServer" : true
    };
    clazz.$$methodMeta.checkNewTestProperties = {
      "isServer" : true
    };
    clazz.$$methodMeta.getPippo = {
      "isServer" : true,
      "returnType":"com.zenesis.qx.remote.test.simple.Pippo"
    };
    clazz.$$methodMeta.getTestAnnos = {
      "isServer" : true,
      "returnType":"com.zenesis.qx.remote.test.simple.TestAnnos"
    };
    clazz.$$methodMeta.getTestArrays = {
      "isServer" : true,
      "returnType":"com.zenesis.qx.remote.test.properties.ITestArrays"
    };
    clazz.$$methodMeta.getTestExceptions = {
      "isServer" : true,
      "returnType":"com.zenesis.qx.remote.test.properties.ITestExceptions"
    };
    clazz.$$methodMeta.getTestMap = {
      "isServer" : true,
      "returnType":"com.zenesis.qx.remote.test.collections.TestJavaUtilMap"
    };
    clazz.$$methodMeta.getTestScalars = {
      "isServer" : true,
      "returnType":"com.zenesis.qx.remote.test.simple.ITestScalars"
    };
    clazz.$$methodMeta.getTodaysDate = {
      "isServer" : true
    };
    clazz.$$methodMeta.isYesterday = {
      "isServer" : true
    };
    clazz.$$methodMeta.myStaticMethod = {
      "isServer" : true
    };
    clazz.$$methodMeta.testPippoArray = {
      "isServer" : true
    };
    clazz.$$methodMeta.testPippoArray2 = {
      "isServer" : true
    };
    clazz.$$methodMeta.verifyTestScalars = {
      "isServer" : true
    };
    clazz.$$methodMeta.waitForMillis = {
      "isServer" : true
    };
    clazz.$$methodMeta.wasLastPippoDisposed = {
      "isServer" : true
    };
    qx.lang.Object.mergeWith(clazz.$$properties.clientTestProperties, {
      "onDemand" : false,
      "isServer" : true,
      "readOnly" : false,
      "sync":"queue",
      "nativeKeyType" : true
    });
    qx.lang.Object.mergeWith(clazz.$$properties.testGroups, {
      "onDemand" : false,
      "isServer" : true,
      "readOnly" : true,
      "sync":"queue",
      "nativeKeyType" : true
    });
    qx.lang.Object.mergeWith(clazz.$$properties.testProperties, {
      "onDemand" : false,
      "isServer" : true,
      "readOnly" : true,
      "sync":"queue",
      "nativeKeyType" : true
    });
    clazz.$$eventMeta.changeTestGroups = {
      "isServer" : true,
      "isProperty" : true
    };
    clazz.$$eventMeta.changeTestProperties = {
      "isServer" : true,
      "isProperty" : true
    };
    clazz.$$eventMeta.changeClientTestProperties = {
      "isServer" : true,
      "isProperty" : true
    };
 }
});
