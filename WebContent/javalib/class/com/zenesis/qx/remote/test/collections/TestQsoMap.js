/**
 * Class generated by Qoxodoo Server Objects com.zenesis.qx.remote.ClassWriter
 * 
 * @use(com.zenesis.qx.remote.test.collections.TestQsoMap$MyValue)
 * @use(com.zenesis.qx.remote.test.collections.TestQsoMap$MyKey)
 * @use(com.zenesis.qx.remote.collections.HashMap)
 */

qx.Class.define("com.zenesis.qx.remote.test.collections.TestQsoMap", {
  "extend" : qx.core.Object,
  "construct" : function() {
    var args = qx.lang.Array.fromArguments(arguments);
    args.unshift(arguments);
    this.base.apply(this, args);
    this.initialiseProxy();
 },
  "properties" : {
    "objectKeyMap" : {
      "@" : [ new com.zenesis.qx.remote.annotations.Property().set({"keyTypeName":"com.zenesis.qx.remote.test.collections.TestQsoMap$MyKey","componentTypeName":"com.zenesis.qx.remote.test.collections.TestQsoMap$MyValue"}) ],
      "nullable" : true,
      "apply" : "_applyObjectKeyMap",
      "check" : "com.zenesis.qx.remote.collections.HashMap",
      "event" : "changeObjectKeyMap"
    },
    "stringMap" : {
      "@" : [ new com.zenesis.qx.remote.annotations.Property().set({"keyTypeName":"String","componentTypeName":"String"}) ],
      "nullable" : true,
      "apply" : "_applyStringMap",
      "check" : "com.zenesis.qx.remote.collections.HashMap",
      "event" : "changeStringMap"
    }
  },
  "members" : {
    "_applyStringMap" : function(value, oldValue, name) {
    this._applyProperty("stringMap", value, oldValue, name);
 },
    "checkObjectMapAsync" : function() {
    var args = qx.lang.Array.fromArguments(arguments);
    return new qx.Promise(function(resolve, reject) {
      args.push(function() {
        resolve.apply(this, qx.lang.Array.fromArguments(arguments));
      });
      this._callServer("checkObjectMap", args);
    }, this);
 },
    "getObjectKeyMapAsync" : function() {
    return qx.Promise.resolve(this.getObjectKeyMap()).bind(this);
 },
    "checkObjectMap" : function() {
    return this._callServer("checkObjectMap", qx.lang.Array.fromArguments(arguments));
 },
    "_applyObjectKeyMap" : function(value, oldValue, name) {
    this._applyProperty("objectKeyMap", value, oldValue, name);
 },
    "makeChanges" : function() {
    return this._callServer("makeChanges", qx.lang.Array.fromArguments(arguments));
 },
    "makeChangesAsync" : function() {
    var args = qx.lang.Array.fromArguments(arguments);
    return new qx.Promise(function(resolve, reject) {
      args.push(function() {
        resolve.apply(this, qx.lang.Array.fromArguments(arguments));
      });
      this._callServer("makeChanges", args);
    }, this);
 },
    "getStringMapAsync" : function() {
    return qx.Promise.resolve(this.getStringMap()).bind(this);
 }
  },
  "defer" : function(clazz) {
    clazz.$$eventMeta = {};
    clazz.$$methodMeta = {};
    com.zenesis.qx.remote.MProxy.deferredClassInitialisation(clazz);
    clazz.$$methodMeta.checkObjectMap = {"isServer":true};
    clazz.$$methodMeta.makeChanges = {"isServer":true};
    qx.lang.Object.mergeWith(clazz.$$properties.objectKeyMap, {"onDemand":false,"isServer":true,"arrayClass":"com.zenesis.qx.remote.collections.HashMap","array":"wrap","readOnly":false,"sync":"queue","map":true});
    qx.lang.Object.mergeWith(clazz.$$properties.stringMap, {"onDemand":false,"isServer":true,"arrayClass":"com.zenesis.qx.remote.collections.HashMap","array":"wrap","readOnly":false,"sync":"queue","map":true,"nativeKeyType":true});
    clazz.$$eventMeta.changeObjectKeyMap = {"isServer":true,"isProperty":true};
    clazz.$$eventMeta.changeStringMap = {"isServer":true,"isProperty":true};
 }
});
