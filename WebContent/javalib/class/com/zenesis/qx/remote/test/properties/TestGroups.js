/**
 * Class generated by Qoxodoo Server Objects com.zenesis.qx.remote.ClassWriter
 * 
 */

qx.Class.define("com.zenesis.qx.remote.test.properties.TestGroups", {
  "extend" : qx.core.Object,
  "construct" : function() {
    var args = qx.lang.Array.fromArguments(arguments);
    args.unshift(arguments);
    this.base.apply(this, args);
    this.initialiseProxy();
 },
  "properties" : {
    "bravo" : {
      "nullable" : true,
      "apply":"_applyBravo",
      "check":"String",
      "event":"changeBravo"
    },
    "alpha" : {
      "nullable" : true,
      "apply":"_applyAlpha",
      "check":"String",
      "event":"changeAlpha"
    },
    "delta" : {
      "nullable" : true,
      "apply":"_applyDelta",
      "check":"String",
      "event":"changeDelta"
    },
    "echo" : {
      "nullable" : true,
      "apply":"_applyEcho",
      "check":"String",
      "event":"changeEcho"
    },
    "charlie" : {
      "nullable" : true,
      "apply":"_applyCharlie",
      "check":"String",
      "event":"changeCharlie"
    }
  },
  "members" : {
    "expireBravo" : function(sendToServer) {
    return this._expirePropertyOnDemand('bravo', sendToServer);
 },
    "_applyBravo" : function(value, oldValue, name) {
    this._applyProperty("bravo", value, oldValue, name);
 },
    "getBravo" : function(async) {
    return this._getPropertyOnDemand('bravo', async);
 },
    "getEcho" : function(async) {
    return this._getPropertyOnDemand('echo', async);
 },
    "_applyDelta" : function(value, oldValue, name) {
    this._applyProperty("delta", value, oldValue, name);
 },
    "getCharlie" : function(async) {
    return this._getPropertyOnDemand('charlie', async);
 },
    "_applyAlpha" : function(value, oldValue, name) {
    this._applyProperty("alpha", value, oldValue, name);
 },
    "getDeltaAsync" : function() {
    return this._getPropertyOnDemandAsync('delta');
 },
    "expireCharlie" : function(sendToServer) {
    return this._expirePropertyOnDemand('charlie', sendToServer);
 },
    "setDelta" : function(value, async) {
    return this._setPropertyOnDemand('delta', value, async);
 },
    "getDelta" : function(async) {
    return this._getPropertyOnDemand('delta', async);
 },
    "getCharlieAsync" : function() {
    return this._getPropertyOnDemandAsync('charlie');
 },
    "setBravo" : function(value, async) {
    return this._setPropertyOnDemand('bravo', value, async);
 },
    "setEcho" : function(value, async) {
    return this._setPropertyOnDemand('echo', value, async);
 },
    "_applyCharlie" : function(value, oldValue, name) {
    this._applyProperty("charlie", value, oldValue, name);
 },
    "getBravoAsync" : function() {
    return this._getPropertyOnDemandAsync('bravo');
 },
    "_applyEcho" : function(value, oldValue, name) {
    this._applyProperty("echo", value, oldValue, name);
 },
    "expireDelta" : function(sendToServer) {
    return this._expirePropertyOnDemand('delta', sendToServer);
 },
    "getAlphaAsync" : function() {
    return qx.Promise.resolve(this.getAlpha()).bind(this);
 },
    "setCharlie" : function(value, async) {
    return this._setPropertyOnDemand('charlie', value, async);
 },
    "expireEcho" : function(sendToServer) {
    return this._expirePropertyOnDemand('echo', sendToServer);
 },
    "getEchoAsync" : function() {
    return this._getPropertyOnDemandAsync('echo');
 }
  },
  "defer" : function(clazz) {
    clazz.$$eventMeta = {};
    clazz.$$methodMeta = {};
    com.zenesis.qx.remote.MProxy.deferredClassInitialisation(clazz);
    qx.lang.Object.mergeWith(clazz.$$properties.bravo, {
      "onDemand" : true,
      "isServer" : true,
      "readOnly" : false,
      "sync":"queue",
      "nativeKeyType" : true
    });
    qx.lang.Object.mergeWith(clazz.$$properties.alpha, {
      "onDemand" : false,
      "isServer" : true,
      "readOnly" : false,
      "sync":"queue",
      "nativeKeyType" : true
    });
    qx.lang.Object.mergeWith(clazz.$$properties.delta, {
      "onDemand" : true,
      "isServer" : true,
      "readOnly" : false,
      "sync":"queue",
      "nativeKeyType" : true
    });
    qx.lang.Object.mergeWith(clazz.$$properties.echo, {
      "onDemand" : true,
      "isServer" : true,
      "readOnly" : false,
      "sync":"queue",
      "nativeKeyType" : true
    });
    qx.lang.Object.mergeWith(clazz.$$properties.charlie, {
      "onDemand" : true,
      "isServer" : true,
      "readOnly" : false,
      "sync":"queue",
      "nativeKeyType" : true
    });
    clazz.$$eventMeta.changeCharlie = {
      "isServer" : true,
      "isProperty" : true
    };
    clazz.$$eventMeta.changeBravo = {
      "isServer" : true,
      "isProperty" : true
    };
    clazz.$$eventMeta.changeEcho = {
      "isServer" : true,
      "isProperty" : true
    };
    clazz.$$eventMeta.changeAlpha = {
      "isServer" : true,
      "isProperty" : true
    };
    clazz.$$eventMeta.changeDelta = {
      "isServer" : true,
      "isProperty" : true
    };
 }
});
