/**
 * Class generated by Qoxodoo Server Objects com.zenesis.qx.remote.ClassWriter
 * 
 * @use(com.zenesis.qx.remote.collections.HashMap)
 * @use(com.zenesis.qx.remote.collections.ArrayList)
 */

qx.Class.define("com.zenesis.qx.remote.test.multiuser.TestMultiUser", {
  "extend" : qx.core.Object,
  "construct" : function() {
    var args = qx.lang.Array.fromArguments(arguments);
    args.unshift(arguments);
    this.base.apply(this, args);
    this.initialiseProxy();
 },
  "properties" : {
    "stringArray" : {
      "@" : [ new com.zenesis.qx.remote.annotations.Property().set({
  "componentTypeName":"String"
}) ],
      "transform":"__transformStringArray",
      "nullable" : true,
      "apply":"_applyStringArray",
      "check":"com.zenesis.qx.remote.collections.ArrayList",
      "event":"changeStringArray"
    },
    "stringMap" : {
      "@" : [ new com.zenesis.qx.remote.annotations.Property().set({
  "keyTypeName":"String",
  "componentTypeName":"String"
}) ],
      "nullable" : true,
      "apply":"_applyStringMap",
      "check":"com.zenesis.qx.remote.collections.HashMap",
      "event":"changeStringMap"
    }
  },
  "members" : {
    "resetAllAsync" : function() {
    var args = qx.lang.Array.fromArguments(arguments);
    return new qx.Promise(function(resolve, reject) {
      args.push(function() {
        resolve.apply(this, qx.lang.Array.fromArguments(arguments));
      });
      this._callServer("resetAll", args);
    }, this);
 },
    "_applyStringMap" : function(value, oldValue, name) {
    this._applyProperty("stringMap", value, oldValue, name);
 },
    "startTest" : function() {
    return this._callServer("startTest", qx.lang.Array.fromArguments(arguments));
 },
    "syncUsers" : function() {
    return this._callServer("syncUsers", qx.lang.Array.fromArguments(arguments));
 },
    "getStringArrayAsync" : function() {
    return qx.Promise.resolve(this.getStringArray()).bind(this);
 },
    "thrashTestAsync" : function() {
    var args = qx.lang.Array.fromArguments(arguments);
    return new qx.Promise(function(resolve, reject) {
      args.push(function() {
        resolve.apply(this, qx.lang.Array.fromArguments(arguments));
      });
      this._callServer("thrashTest", args);
    }, this);
 },
    "checkReady" : function() {
    return this._callServer("checkReady", qx.lang.Array.fromArguments(arguments));
 },
    "startTestAsync" : function() {
    var args = qx.lang.Array.fromArguments(arguments);
    return new qx.Promise(function(resolve, reject) {
      args.push(function() {
        resolve.apply(this, qx.lang.Array.fromArguments(arguments));
      });
      this._callServer("startTest", args);
    }, this);
 },
    "__transformStringArray" : function(value) {
    return com.zenesis.qx.remote.MProxy.transformToDataArray(value, com.zenesis.qx.remote.collections.ArrayList);
 },
    "resetAll" : function() {
    return this._callServer("resetAll", qx.lang.Array.fromArguments(arguments));
 },
    "noop" : function() {
    return this._callServer("noop", qx.lang.Array.fromArguments(arguments));
 },
    "syncUsersAsync" : function() {
    var args = qx.lang.Array.fromArguments(arguments);
    return new qx.Promise(function(resolve, reject) {
      args.push(function() {
        resolve.apply(this, qx.lang.Array.fromArguments(arguments));
      });
      this._callServer("syncUsers", args);
    }, this);
 },
    "_applyStringArray" : function(value, oldValue, name) {
    this._applyProperty("stringArray", value, oldValue, name);
 },
    "checkReadyAsync" : function() {
    var args = qx.lang.Array.fromArguments(arguments);
    return new qx.Promise(function(resolve, reject) {
      args.push(function() {
        resolve.apply(this, qx.lang.Array.fromArguments(arguments));
      });
      this._callServer("checkReady", args);
    }, this);
 },
    "noopAsync" : function() {
    var args = qx.lang.Array.fromArguments(arguments);
    return new qx.Promise(function(resolve, reject) {
      args.push(function() {
        resolve.apply(this, qx.lang.Array.fromArguments(arguments));
      });
      this._callServer("noop", args);
    }, this);
 },
    "thrashTest" : function() {
    return this._callServer("thrashTest", qx.lang.Array.fromArguments(arguments));
 },
    "getStringMapAsync" : function() {
    return qx.Promise.resolve(this.getStringMap()).bind(this);
 }
  },
  "defer" : function(clazz) {
    clazz.$$eventMeta = {};
    clazz.$$methodMeta = {};
    com.zenesis.qx.remote.MProxy.deferredClassInitialisation(clazz);
    clazz.$$methodMeta.checkReady = {
      "isServer" : true
    };
    clazz.$$methodMeta.noop = {
      "isServer" : true
    };
    clazz.$$methodMeta.resetAll = {
      "isServer" : true
    };
    clazz.$$methodMeta.startTest = {
      "isServer" : true
    };
    clazz.$$methodMeta.syncUsers = {
      "isServer" : true
    };
    clazz.$$methodMeta.thrashTest = {
      "isServer" : true
    };
    qx.lang.Object.mergeWith(clazz.$$properties.stringArray, {
      "onDemand" : false,
      "isServer" : true,
      "arrayClass":"com.zenesis.qx.remote.collections.ArrayList",
      "array":"wrap",
      "readOnly" : false,
      "sync":"queue",
      "nativeKeyType" : true
    });
    qx.lang.Object.mergeWith(clazz.$$properties.stringMap, {
      "onDemand" : false,
      "isServer" : true,
      "arrayClass":"com.zenesis.qx.remote.collections.HashMap",
      "array":"wrap",
      "readOnly" : false,
      "sync":"queue",
      "map" : true,
      "nativeKeyType" : true
    });
    clazz.$$eventMeta.changeStringArray = {
      "isServer" : true,
      "isProperty" : true
    };
    clazz.$$eventMeta.changeStringMap = {
      "isServer" : true,
      "isProperty" : true
    };
 }
});
