/**
 * Class generated by Qoxodoo Server Objects com.zenesis.qx.remote.ClassWriter
 * 
 * @use(com.zenesis.qx.remote.FileApi)
 */

qx.Class.define("com.zenesis.qx.remote.BasicBootstrap", {
  "extend" : qx.core.Object,
  "implement" : [ com.zenesis.qx.remote.FileApiProvider ],
  "construct" : function() {
    var args = qx.lang.Array.fromArguments(arguments);
    args.unshift(arguments);
    this.base.apply(this, args);
    this.initialiseProxy();
 },
  "properties" : {
    "fileApi" : {
      "@" : [ new com.zenesis.qx.remote.annotations.Property().set({"readOnly":true}) ],
      "nullable" : true,
      "apply" : "_applyFileApi",
      "check" : "com.zenesis.qx.remote.FileApi",
      "event" : "changeFileApi"
    }
  },
  "members" : {
    "_applyFileApi" : function(value, oldValue, name) {
    this._applyProperty("fileApi", value, oldValue, name);
 },
    "getFileApiAsync" : function() {
    return qx.Promise.resolve(this.getFileApi()).bind(this);
 },
    "loadProxyType" : function() {
    return this._callServer("loadProxyType", qx.lang.Array.fromArguments(arguments));
 },
    "loadProxyTypeAsync" : function() {
    var args = qx.lang.Array.fromArguments(arguments);
    return new qx.Promise(function(resolve, reject) {
      args.push(function() {
        resolve.apply(this, qx.lang.Array.fromArguments(arguments));
      });
      this._callServer("loadProxyType", args);
    }, this);
 }
  },
  "defer" : function(clazz) {
    clazz.$$eventMeta = {};
    clazz.$$methodMeta = {};
    com.zenesis.qx.remote.MProxy.deferredClassInitialisation(clazz);
    clazz.$$methodMeta.loadProxyType = {"isServer":true};
    qx.lang.Object.mergeWith(clazz.$$properties.fileApi, {"onDemand":false,"isServer":true,"readOnly":true,"sync":"queue","nativeKeyType":true});
    clazz.$$eventMeta.changeFileApi = {"isServer":true,"isProperty":true};
 }
});
